// vite-plugin-firebase-sw.ts
import type { Plugin } from 'vite';
import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { resolve, dirname } from 'path';

interface FirebaseSwPluginOptions {
  envPrefix?: string;
}

export function firebaseMessagingSw(options: FirebaseSwPluginOptions = {}): Plugin {
  const { envPrefix = 'VITE_' } = options;
  let isGenerated = false;

  const generateSW = () => {
    if (isGenerated) {
      return; // Chỉ generate 1 lần
    }

    const env = process.env;

    // Validate required env vars
    const requiredVars = [
      `${envPrefix}FIREBASE_API_KEY`,
      `${envPrefix}FIREBASE_AUTH_DOMAIN`,
      `${envPrefix}FIREBASE_PROJECT_ID`,
      `${envPrefix}FIREBASE_STORAGE_BUCKET`,
      `${envPrefix}FIREBASE_MESSAGING_SENDER_ID`,
      `${envPrefix}FIREBASE_APP_ID`,
    ];

    const missingVars = requiredVars.filter(varName => !env[varName]);
    if (missingVars.length > 0) {
      console.warn('⚠️  Missing Firebase environment variables:', missingVars.join(', '));
      console.warn('⚠️  firebase-messaging-sw.js will not be generated');
      return;
    }

    const swContent = `// firebase-messaging-sw.js
// Auto-generated by vite-plugin-firebase-messaging-sw
// Generated at: ${new Date().toISOString()}

importScripts('https://www.gstatic.com/firebasejs/10.7.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/10.7.0/firebase-messaging-compat.js');

// Firebase Configuration
const firebaseConfig = {
  apiKey: "${env[`${envPrefix}FIREBASE_API_KEY`]}",
  authDomain: "${env[`${envPrefix}FIREBASE_AUTH_DOMAIN`]}",
  projectId: "${env[`${envPrefix}FIREBASE_PROJECT_ID`]}",
  storageBucket: "${env[`${envPrefix}FIREBASE_STORAGE_BUCKET`]}",
  messagingSenderId: "${env[`${envPrefix}FIREBASE_MESSAGING_SENDER_ID`]}",
  appId: "${env[`${envPrefix}FIREBASE_APP_ID`]}"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const messaging = firebase.messaging();

console.log('[firebase-messaging-sw.js] Service Worker initialized');

// Handle background messages
messaging.onBackgroundMessage((payload) => {
  console.log('[firebase-messaging-sw.js] Received background message:', payload);

  const notificationTitle = payload.notification?.title || 'Thông báo mới';
  const notificationOptions = {
    body: payload.notification?.body || '',
    icon: payload.notification?.icon || '/favicon.ico',
    badge: '/pwa-192x192.png',
    vibrate: [200, 100, 200],
    data: {
      url: payload.data?.url || '/',
      dateOfArrival: Date.now(),
      ...payload.data,
    },
    actions: [
      {
        action: 'open',
        title: 'Mở ứng dụng',
      },
      {
        action: 'close',
        title: 'Đóng',
      }
    ],
    tag: payload.data?.tag || 'notification',
    requireInteraction: false,
    silent: false,
  };

  return self.registration.showNotification(notificationTitle, notificationOptions);
});

// Handle notification click
self.addEventListener('notificationclick', (event) => {
  console.log('[firebase-messaging-sw.js] Notification click:', event.action);
  
  event.notification.close();

  if (event.action === 'close') {
    return;
  }

  if (event.action === 'open' || !event.action) {
    const urlToOpen = event.notification.data?.url || '/';
    
    event.waitUntil(
      clients.matchAll({ 
        type: 'window', 
        includeUncontrolled: true 
      }).then((windowClients) => {
        // Find existing window
        for (const client of windowClients) {
          try {
            const clientUrl = new URL(client.url);
            const targetUrl = new URL(urlToOpen, self.location.origin);
            
            if (clientUrl.origin === targetUrl.origin && 'focus' in client) {
              // Navigate if different path
              if (clientUrl.pathname !== targetUrl.pathname) {
                return client.navigate(urlToOpen).then(c => c ? c.focus() : null);
              }
              return client.focus();
            }
          } catch (e) {
            console.error('[firebase-messaging-sw.js] Error processing client:', e);
          }
        }
        
        // Open new window if no existing one
        if (clients.openWindow) {
          return clients.openWindow(urlToOpen);
        }
      }).catch(err => {
        console.error('[firebase-messaging-sw.js] Error handling notification click:', err);
      })
    );
  }
});

// Handle push events (fallback)
self.addEventListener('push', (event) => {
  console.log('[firebase-messaging-sw.js] Push event received');
  
  if (!event.data) {
    console.log('[firebase-messaging-sw.js] Push event has no data');
    return;
  }

  try {
    const payload = event.data.json();
    console.log('[firebase-messaging-sw.js] Push payload:', payload);

    const notificationTitle = payload.notification?.title || payload.data?.title || 'Thông báo mới';
    const notificationOptions = {
      body: payload.notification?.body || payload.data?.body || '',
      icon: payload.notification?.icon || '/favicon.ico',
      badge: '/pwa-192x192.png',
      vibrate: [200, 100, 200],
      data: payload.data || {},
      tag: payload.data?.tag || 'push-notification',
      requireInteraction: false,
    };

    event.waitUntil(
      self.registration.showNotification(notificationTitle, notificationOptions)
    );
  } catch (error) {
    console.error('[firebase-messaging-sw.js] Error parsing push data:', error);
  }
});
`;

    // Xác định output path
    const outputPath = resolve(process.cwd(), 'public', 'firebase-messaging-sw.js');
    const outputDir = dirname(outputPath);
    
    try {
      // Tạo thư mục public nếu chưa có
      if (!existsSync(outputDir)) {
        mkdirSync(outputDir, { recursive: true });
        console.log('📁 Created public directory');
      }

      // Ghi file
      writeFileSync(outputPath, swContent, 'utf-8');
      console.log('✅ firebase-messaging-sw.js generated successfully!');
      console.log(`📄 Location: ${outputPath}`);
      isGenerated = true;
    } catch (error) {
      console.error('❌ Error generating firebase-messaging-sw.js:', error);
    }
  };

  return {
    name: 'vite-plugin-firebase-messaging-sw',
    
    // Generate khi config được resolve
    configResolved(config) {
      console.log('🔧 Vite config resolved, generating firebase-messaging-sw.js...');
      generateSW();
    },

    // Generate lại khi build starts
    buildStart() {
      if (!isGenerated) {
        console.log('🏗️  Build started, generating firebase-messaging-sw.js...');
        generateSW();
      }
    },
  };
}

export default firebaseMessagingSw;