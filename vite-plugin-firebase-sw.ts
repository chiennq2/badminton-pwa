// vite-plugin-firebase-sw.ts
import { config } from 'dotenv';
import { expand } from 'dotenv-expand';
import type { Plugin } from 'vite';
import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { resolve, dirname } from 'path';

// === THAY ƒê·ªîI QUAN TR·ªåNG ===
// T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env ngay khi plugin ƒë∆∞·ª£c import
// ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o process.env ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn s·∫µn khi plugin ch·∫°y
const envResult = config();
if (envResult.error) {
  // Kh√¥ng sao c·∫£ n·∫øu file .env kh√¥ng t·ªìn t·∫°i, plugin s·∫Ω d√πng bi·∫øn m√¥i tr∆∞·ªùng c·ªßa h·ªá th·ªëng
  console.warn('‚ö†Ô∏è  Could not find .env file, relying on system environment variables.');
} else {
  // M·ªü r·ªông c√°c bi·∫øn n·∫øu c√≥ (v√≠ d·ª•: VITE_API_URL=$VITE_BASE_URL/api)
  expand(envResult);
  console.log('üìÑ Loaded environment variables from .env file for the plugin.');
}
// === K·∫æT TH√öC THAY ƒê·ªîI ===

interface FirebaseSwPluginOptions {
  envPrefix?: string;
  outputPath?: string;
}

export function firebaseMessagingSw(options: FirebaseSwPluginOptions = {}): Plugin {
  const { 
    envPrefix = 'VITE_', 
    outputPath = 'public/firebase-messaging-sw.js'
  } = options;
  
  let isGenerated = false;

  const generateSW = () => {
    if (isGenerated) return;

    const env = process.env;

    // L·∫•y gi√° tr·ªã, ∆∞u ti√™n bi·∫øn c√≥ prefix (cho local dev), sau ƒë√≥ ƒë·∫øn bi·∫øn kh√¥ng prefix (cho Vercel)
    const getEnvVar = (name: string) => {
      return env[`${envPrefix}${name}`] || env[name] || '';
    };

    const firebaseConfig = {
      apiKey: getEnvVar('FIREBASE_API_KEY'),
      authDomain: getEnvVar('FIREBASE_AUTH_DOMAIN'),
      projectId: getEnvVar('FIREBASE_PROJECT_ID'),
      storageBucket: getEnvVar('FIREBASE_STORAGE_BUCKET'),
      messagingSenderId: getEnvVar('FIREBASE_MESSAGING_SENDER_ID'),
      appId: getEnvVar('FIREBASE_APP_ID'),
    };

    // Ki·ªÉm tra c√°c bi·∫øn b·∫Øt bu·ªôc sau khi ƒë√£ l·∫•y gi√° tr·ªã
    const missingVars = Object.entries(firebaseConfig)
      .filter(([key, value]) => !value)
      .map(([key]) => `${envPrefix}FIREBASE_${key.toUpperCase()}`);

    if (missingVars.length > 0) {
      console.warn('‚ö†Ô∏è  Missing Firebase environment variables:', missingVars.join(', '));
      console.warn('‚ö†Ô∏è  firebase-messaging-sw.js will not be generated');
      return;
    }
    
    const swContent = `// firebase-messaging-sw.js
// Auto-generated by vite-plugin-firebase-messaging-sw
// Generated at: ${new Date().toISOString()}

importScripts('https://www.gstatic.com/firebasejs/10.7.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/10.7.0/firebase-messaging-compat.js');

// Firebase Configuration
const firebaseConfig = {
  apiKey: "${firebaseConfig.apiKey}",
  authDomain: "${firebaseConfig.authDomain}",
  projectId: "${firebaseConfig.projectId}",
  storageBucket: "${firebaseConfig.storageBucket}",
  messagingSenderId: "${firebaseConfig.messagingSenderId}",
  appId: "${firebaseConfig.appId}"
};

// Initialize Firebase
if (!firebase.apps.length) {
  firebase.initializeApp(firebaseConfig);
}
const messaging = firebase.messaging();

console.log('[firebase-messaging-sw.js] Service Worker initialized');

// Handle background messages
messaging.onBackgroundMessage((payload) => {
  console.log('[firebase-messaging-sw.js] Received background message:', payload);

  const notificationTitle = payload.notification?.title || 'Th√¥ng b√°o m·ªõi';
  const notificationOptions = {
    body: payload.notification?.body || '',
    icon: payload.notification?.icon || '/favicon.ico',
    badge: '/pwa-192x192.png',
    vibrate: [200, 100, 200],
    data: {
      url: payload.data?.url || '/',
      dateOfArrival: Date.now(),
      ...payload.data,
    },
    actions: [
      {
        action: 'open',
        title: 'M·ªü ·ª©ng d·ª•ng',
      },
      {
        action: 'close',
        title: 'ƒê√≥ng',
      }
    ],
    tag: payload.data?.tag || 'notification',
    requireInteraction: false,
    silent: false,
  };

  return self.registration.showNotification(notificationTitle, notificationOptions);
});

// Handle notification click
self.addEventListener('notificationclick', (event) => {
  console.log('[firebase-messaging-sw.js] Notification click:', event.action);
  
  event.notification.close();

  if (event.action === 'close') {
    return;
  }

  if (event.action === 'open' || !event.action) {
    const urlToOpen = event.notification.data?.url || '/';
    
    event.waitUntil(
      clients.matchAll({ 
        type: 'window', 
        includeUncontrolled: true 
      }).then((windowClients) => {
        for (const client of windowClients) {
          try {
            const clientUrl = new URL(client.url);
            const targetUrl = new URL(urlToOpen, self.location.origin);
            
            if (clientUrl.origin === targetUrl.origin && 'focus' in client) {
              if (clientUrl.pathname !== targetUrl.pathname) {
                return client.navigate(urlToOpen).then(c => c ? c.focus() : null);
              }
              return client.focus();
            }
          } catch (e) {
            console.error('[firebase-messaging-sw.js] Error processing client:', e);
          }
        }
        
        if (clients.openWindow) {
          return clients.openWindow(urlToOpen);
        }
      }).catch(err => {
        console.error('[firebase-messaging-sw.js] Error handling notification click:', err);
      })
    );
  }
});

// Handle push events (fallback)
self.addEventListener('push', (event) => {
  console.log('[firebase-messaging-sw.js] Push event received');
  
  if (!event.data) {
    console.log('[firebase-messaging-sw.js] Push event has no data');
    return;
  }

  try {
    const payload = event.data.json();
    console.log('[firebase-messaging-sw.js] Push payload:', payload);

    const notificationTitle = payload.notification?.title || payload.data?.title || 'Th√¥ng b√°o m·ªõi';
    const notificationOptions = {
      body: payload.notification?.body || payload.data?.body || '',
      icon: payload.notification?.icon || '/favicon.ico',
      badge: '/pwa-192x192.png',
      vibrate: [200, 100, 200],
      data: payload.data || {},
      tag: payload.data?.tag || 'push-notification',
      requireInteraction: false,
    };

    event.waitUntil(
      self.registration.showNotification(notificationTitle, notificationOptions)
    );
  } catch (error) {
    console.error('[firebase-messaging-sw.js] Error parsing push data:', error);
  }
});
`;

    const resolvedOutputPath = resolve(process.cwd(), outputPath);
    const outputDir = dirname(resolvedOutputPath);
    
    try {
      if (!existsSync(outputDir)) {
        mkdirSync(outputDir, { recursive: true });
      }
      writeFileSync(resolvedOutputPath, swContent, 'utf-8');
      console.log('‚úÖ firebase-messaging-sw.js generated successfully!');
      console.log(`üìÑ Location: ${resolvedOutputPath}`);
      isGenerated = true;
    } catch (error) {
      console.error('‚ùå Error generating firebase-messaging-sw.js:', error);
    }
  };

  return {
    name: 'vite-plugin-firebase-messaging-sw',
    
    configResolved() {
      console.log('üîß Vite config resolved, generating firebase-messaging-sw.js...');
      generateSW();
    },

    buildStart() {
      if (!isGenerated) {
        console.log('üèóÔ∏è  Build started, generating firebase-messaging-sw.js...');
        generateSW();
      }
    },
  };
}

export default firebaseMessagingSw;